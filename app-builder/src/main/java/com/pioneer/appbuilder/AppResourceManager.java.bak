package com.pioneer.appbuilder;

import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

/**
 * 应用资源管理器
 * 用于处理app资源文件相关的操作
 */
public class AppResourceManager {
    
    private final AppConfig config;
    
    public AppResourceManager(AppConfig config) {
        this.config = config;
    }
    
    /**
     * 更新config.xml文件
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void updateConfigXml(File appDir) throws IOException {
        File configFile = new File(appDir, "src/main/res/values/config.xml");
        
        StringBuilder xml = new StringBuilder();
        xml.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
        xml.append("<resources>\n");
        
        // 启动页配置
        xml.append("    <!-- 启动页配置 -->\n");
        xml.append("    <string name=\"splash_image_path\">").append(config.splashConfig.imagePath).append("</string>\n");
        xml.append("    <integer name=\"splash_delay_time\">").append(config.splashConfig.delayTime).append("</integer>\n");
        xml.append("    \n");
        
        // 声音配置
        xml.append("    <!-- 声音配置 -->\n");
        xml.append("    <string name=\"detection_sound_resource\">").append(config.soundConfig.detectionSoundResource).append("</string>\n");
        xml.append("    \n");
        
        // App说明页面配置 - 使用CDATA
        xml.append("    <!-- App说明页面配置 -->\n");
        xml.append("    <string name=\"app_info_text\">").append(safeXmlText(config.appInfoConfig.infoText)).append("</string>\n");
        xml.append("    \n");
        
        // 主界面配置
        xml.append("    <!-- 主界面配置 -->\n");
        xml.append("    <integer name=\"default_target_label\">").append(config.mainConfig.defaultTargetLabel).append("</integer>\n");
        xml.append("    \n");
        
        // 添加自定义项
        xml.append("    <!-- 更多配置项可以在此处添加 -->\n");
        
        xml.append("</resources>");
        
        FileUtils.writeStringToFile(configFile, xml.toString(), StandardCharsets.UTF_8);
    }
    
    /**
     * 安全处理XML文本内容，使用CDATA包装内容
     * @param input 输入文本
     * @return 使用CDATA包装的安全XML文本
     */
    private String safeXmlText(String input) {
        if (input == null || input.isEmpty()) {
            return "应用说明";
        }
        
        // 使用CDATA包装处理特殊字符
        StringBuilder sb = new StringBuilder();
        sb.append("<![CDATA[");
        
        // 处理CDATA中的特殊情况
        String processed = input.replace("]]>", "]]]]><![CDATA[>");
        sb.append(processed);
        
        sb.append("]]>");
        
        return sb.toString();
    }
    
    /**
     * 更新strings.xml文件中的应用名称
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void updateAppName(File appDir) throws IOException {
        File stringsFile = new File(appDir, "src/main/res/values/strings.xml");
        
        if (stringsFile.exists()) {
            String content = FileUtils.readFileToString(stringsFile, StandardCharsets.UTF_8);
            content = content.replaceAll("<string name=\"app_name\">[^<]+</string>", 
                    "<string name=\"app_name\">" + config.appName + "</string>");
            FileUtils.writeStringToFile(stringsFile, content, StandardCharsets.UTF_8);
        }
    }
    
    /**
     * 更新AndroidManifest.xml文件
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void updateManifest(File appDir) throws IOException {
        File manifest = new File(appDir, "src/main/AndroidManifest.xml");
        
        if (manifest.exists()) {
            String content = FileUtils.readFileToString(manifest, StandardCharsets.UTF_8);
            
            // 保存原始包名，用于检查Java源文件
            String originalPackage = "";
            if (content.contains("package=\"")) {
                originalPackage = content.split("package=\"")[1].split("\"")[0];
            }
            
            // 更新包名
            content = content.replaceAll("package=\"[^\"]+\"", "package=\"" + config.packageName + "\"");
            
            // 更新版本信息
            content = content.replaceAll("android:versionCode=\"[^\"]+\"", "android:versionCode=\"" + config.versionCode + "\"");
            content = content.replaceAll("android:versionName=\"[^\"]+\"", "android:versionName=\"" + config.versionName + "\"");
            
            FileUtils.writeStringToFile(manifest, content, StandardCharsets.UTF_8);
            
            // 如果包名改变，尝试更新Java源文件的引用
            if (!originalPackage.isEmpty() && !originalPackage.equals(config.packageName)) {
                updateRImports(appDir, originalPackage, config.packageName);
            }
        }
        
        // 确保资源文件夹存在
        ensureResourceDirectories(appDir);
    }
    
    /**
     * 确保所需资源目录存在，避免R类生成问题
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    private void ensureResourceDirectories(File appDir) throws IOException {
        String[] resourceDirs = {
            "src/main/res/drawable",
            "src/main/res/drawable-hdpi",
            "src/main/res/drawable-xhdpi",
            "src/main/res/drawable-xxhdpi",
            "src/main/res/layout",
            "src/main/res/values"
        };
        
        for (String dirPath : resourceDirs) {
            File dir = new File(appDir, dirPath);
            if (!dir.exists()) {
                dir.mkdirs();
                System.out.println("创建资源目录: " + dir.getAbsolutePath());
            }
        }
        
        // 如果不存在基本的资源文件，创建一个简单的占位符
        File valuesDir = new File(appDir, "src/main/res/values");
        if (valuesDir.exists()) {
            File colorsFile = new File(valuesDir, "colors.xml");
            if (!colorsFile.exists()) {
                String colorsContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                       "<resources>\n" +
                                       "    <color name=\"colorPrimary\">#3F51B5</color>\n" +
                                       "    <color name=\"colorPrimaryDark\">#303F9F</color>\n" +
                                       "    <color name=\"colorAccent\">#FF4081</color>\n" +
                                       "</resources>";
                FileUtils.writeStringToFile(colorsFile, colorsContent, StandardCharsets.UTF_8);
            }
        }
    }
    
    /**
     * 更新Java源文件中的R类引用
     * @param appDir 应用目录
     * @param oldPackage 原始包名
     * @param newPackage 新包名
     * @throws IOException 文件操作错误
     */
    public void updateRImports(File appDir, String oldPackage, String newPackage) throws IOException {
        // 查找所有Java源文件
        File srcDir = new File(appDir, "src/main/java");
        if (!srcDir.exists()) {
            return;
        }
        
        System.out.println("更新Java源文件中的R类引用... 从 " + oldPackage + " 到 " + newPackage);
        
        // 递归处理所有Java文件
        processJavaFiles(srcDir, oldPackage, newPackage);
    }
    
    /**
     * 递归处理Java文件中的包名引用
     * @param dir 目录
     * @param oldPackage 原始包名
     * @param newPackage 新包名
     * @throws IOException 文件操作错误
     */
    private void processJavaFiles(File dir, String oldPackage, String newPackage) throws IOException {
        if (!dir.exists() || !dir.isDirectory()) {
            return;
        }
        
        File[] files = dir.listFiles();
        if (files == null) {
            return;
        }
        
        for (File file : files) {
            if (file.isDirectory()) {
                processJavaFiles(file, oldPackage, newPackage);
            } else if (file.getName().endsWith(".java")) {
                updateJavaFileImports(file, oldPackage, newPackage);
            }
        }
    }
    
    /**
     * 更新单个Java文件中的引用
     * @param file Java文件
     * @param oldPackage 原始包名
     * @param newPackage 新包名
     * @throws IOException 文件操作错误
     */
    private void updateJavaFileImports(File file, String oldPackage, String newPackage) throws IOException {
        String content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
        
        // 更新对R类的引用
        if (content.contains(oldPackage + ".R")) {
            content = content.replace(oldPackage + ".R", newPackage + ".R");
            System.out.println("更新R类引用: " + file.getAbsolutePath());
            FileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);
        }
        
        // 如果没有明确导入R类，添加导入语句
        if (content.contains("R.") && !content.contains("import " + newPackage + ".R;") && 
            !content.contains("package " + newPackage + ";")) {
            int packageEndIndex = content.indexOf(";", content.indexOf("package ")) + 1;
            String updatedContent = content.substring(0, packageEndIndex) + 
                                   "\n\nimport " + newPackage + ".R;\n" + 
                                   content.substring(packageEndIndex);
            System.out.println("添加R类导入: " + file.getAbsolutePath());
            FileUtils.writeStringToFile(file, updatedContent, StandardCharsets.UTF_8);
        }
    }
    
    /**
     * 更新应用图标
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void updateAppIcon(File appDir) throws IOException {
        if (config.iconPath == null || config.iconPath.isEmpty()) {
            return;
        }
        
        File iconFile = new File(config.iconPath);
        if (!iconFile.exists() || !iconFile.isFile()) {
            System.err.println("警告: 图标文件不存在: " + config.iconPath);
            return;
        }
        
        // 查找所有drawable目录
        File resDir = new File(appDir, "src/main/res");
        if (!resDir.exists() || !resDir.isDirectory()) {
            System.err.println("警告: 资源目录不存在: " + resDir.getAbsolutePath());
            return;
        }
        
        // 更新所有drawable目录中的应用图标
        File[] directories = resDir.listFiles(file -> 
                file.isDirectory() && file.getName().startsWith("drawable"));
        
        if (directories != null) {
            for (File dir : directories) {
                updateIconsInDirectory(dir, iconFile);
            }
        }
    }
    
    /**
     * 更新指定目录中的图标文件
     * @param directory 目录
     * @param iconFile 新图标文件
     * @throws IOException 文件操作错误
     */
    private void updateIconsInDirectory(File directory, File iconFile) throws IOException {
        File[] iconFiles = directory.listFiles(file ->
                file.isFile() && (file.getName().startsWith("ic_launcher") || 
                                 file.getName().equals("app_icon.png")));
        
        if (iconFiles != null && iconFiles.length > 0) {
            for (File target : iconFiles) {
                System.out.println("更新图标: " + target.getAbsolutePath());
                Files.copy(iconFile.toPath(), target.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
        }
    }
    
    /**
     * 复制并重命名启动页图片
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void updateSplashImage(File appDir) throws IOException {
        if (config.splashConfig.imagePath == null || config.splashConfig.imagePath.isEmpty()) {
            return;
        }
        
        // 解析路径，处理相对路径和绝对路径
        String imagePath = config.splashConfig.imagePath;
        Path sourcePath;
        if (imagePath.startsWith("/")) {
            sourcePath = Paths.get(imagePath);
        } else {
            // 假设是相对于项目根目录的路径
            sourcePath = Paths.get(imagePath);
        }
        
        if (!Files.exists(sourcePath)) {
            System.err.println("警告: 启动页图片不存在: " + imagePath);
            return;
        }
        
        // 获取文件扩展名
        String fileName = sourcePath.getFileName().toString();
        String extension = "";
        int i = fileName.lastIndexOf('.');
        if (i > 0) {
            extension = fileName.substring(i);
        }
        
        // 将图片复制到assets目录
        Path targetPath = Paths.get(appDir.getAbsolutePath(), 
                "src/main/assets/images/splash" + extension);
        
        // 确保目标目录存在
        Files.createDirectories(targetPath.getParent());
        
        // 复制文件
        Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);
        
        // 更新config.xml中的路径
        config.splashConfig.imagePath = "images/splash" + extension;
    }
    
    /**
     * 确保所有必需的资源文件存在
     * @param appDir 应用目录
     * @throws IOException 文件操作错误
     */
    public void ensureRequiredResources(File appDir) throws IOException {
        System.out.println("检查并创建必要的资源文件...");
        
        // 确保drawable目录存在
        File drawableDir = new File(appDir, "src/main/res/drawable");
        if (!drawableDir.exists()) {
            drawableDir.mkdirs();
        }
        
        // 确保layout目录存在
        File layoutDir = new File(appDir, "src/main/res/layout");
        if (!layoutDir.exists()) {
            layoutDir.mkdirs();
        }
        
        // 确保values目录存在
        File valuesDir = new File(appDir, "src/main/res/values");
        if (!valuesDir.exists()) {
            valuesDir.mkdirs();
        }
        
        // 创建必要的drawable资源
        createRequiredDrawableResources(drawableDir);
        
        // 创建必要的layout资源
        createRequiredLayoutResources(layoutDir);
        
        // 创建必要的values资源
        createRequiredValuesResources(valuesDir);
        
        System.out.println("基本资源文件创建完成");
    }
    
    /**
     * 创建必要的drawable资源文件
     * @param drawableDir drawable目录
     * @throws IOException 文件操作错误
     */
    private void createRequiredDrawableResources(File drawableDir) throws IOException {
        // 检查错误中提到的drawable资源是否存在
        String[] requiredDrawables = {
            "btn_initial.png",
            "btn_ready_to_detect.png",
            "btn_detecting_correct.png",
            "btn_detecting_wrong.png",
            "img_surface_bg.png"
        };
        
        for (String drawable : requiredDrawables) {
            File drawableFile = new File(drawableDir, drawable);
            if (!drawableFile.exists()) {
                // 创建一个简单的1x1像素PNG图像
                createSimpleImage(drawableFile);
                System.out.println("创建默认图像资源: " + drawableFile.getName());
            }
        }
    }
    
    /**
     * 创建简单的图像文件(1x1像素)
     * @param file 图像文件
     * @throws IOException 文件操作错误
     */
    private void createSimpleImage(File file) throws IOException {
        // 创建一个1x1像素的简单PNG图像
        byte[] placeholder = {
            (byte)0x89, (byte)0x50, (byte)0x4E, (byte)0x47, (byte)0x0D, (byte)0x0A, (byte)0x1A, (byte)0x0A,
            0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x08, 0x02, 0x00, 0x00, 0x00, (byte)0x90, 0x77, 0x53, (byte)0xDE, 0x00, 0x00, 0x00,
            0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, (byte)0xD7, 0x63, (byte)0xF8, (byte)0xCF, (byte)0xC0, 0x00, 0x00,
            0x03, 0x01, 0x01, 0x00, (byte)0x18, (byte)0xDD, (byte)0x8D, (byte)0xB0, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
            0x4E, 0x44, (byte)0xAE, 0x42, 0x60, (byte)0x82
        };
        
        FileUtils.writeByteArrayToFile(file, placeholder);
    }
    
    /**
     * 创建必要的layout资源文件
     * @param layoutDir layout目录
     * @throws IOException 文件操作错误
     */
    private void createRequiredLayoutResources(File layoutDir) throws IOException {
        // 主界面布局
        File mainLayout = new File(layoutDir, "main.xml");
        if (!mainLayout.exists()) {
            String mainContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
                                "    android:layout_width=\"match_parent\"\n" +
                                "    android:layout_height=\"match_parent\">\n" +
                                "    <SurfaceView\n" +
                                "        android:id=\"@+id/cameraview\"\n" +
                                "        android:layout_width=\"match_parent\"\n" +
                                "        android:layout_height=\"match_parent\" />\n" +
                                "    <ImageView\n" +
                                "        android:id=\"@+id/initialImage\"\n" +
                                "        android:layout_width=\"match_parent\"\n" +
                                "        android:layout_height=\"match_parent\"\n" +
                                "        android:scaleType=\"centerCrop\"\n" +
                                "        android:src=\"@drawable/img_surface_bg\" />\n" +
                                "    <TextView\n" +
                                "        android:id=\"@+id/statusText\"\n" +
                                "        android:layout_width=\"wrap_content\"\n" +
                                "        android:layout_height=\"wrap_content\"\n" +
                                "        android:layout_alignParentTop=\"true\"\n" +
                                "        android:layout_centerHorizontal=\"true\"\n" +
                                "        android:text=\"Status\" />\n" +
                                "    <com.tencent.yolov8ncnn.DetectionOverlayView\n" +
                                "        android:id=\"@+id/detectionOverlay\"\n" +
                                "        android:layout_width=\"match_parent\"\n" +
                                "        android:layout_height=\"match_parent\" />\n" +
                                "    <ImageButton\n" +
                                "        android:id=\"@+id/buttonStartCamera\"\n" +
                                "        android:layout_width=\"wrap_content\"\n" +
                                "        android:layout_height=\"wrap_content\"\n" +
                                "        android:layout_centerInParent=\"true\"\n" +
                                "        android:background=\"@null\"\n" +
                                "        android:src=\"@drawable/btn_initial\" />\n" +
                                "    <LinearLayout\n" +
                                "        android:id=\"@+id/debugPanel\"\n" +
                                "        android:layout_width=\"match_parent\"\n" +
                                "        android:layout_height=\"wrap_content\"\n" +
                                "        android:layout_alignParentBottom=\"true\"\n" +
                                "        android:orientation=\"vertical\"\n" +
                                "        android:padding=\"10dp\">\n" +
                                "        <Switch\n" +
                                "            android:id=\"@+id/switchUIVisible\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\"\n" +
                                "            android:text=\"UI可见性\" />\n" +
                                "        <Spinner\n" +
                                "            android:id=\"@+id/spinnerLanguage\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\" />\n" +
                                "        <Spinner\n" +
                                "            android:id=\"@+id/spinnerTargetLabel\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\" />\n" +
                                "        <Spinner\n" +
                                "            android:id=\"@+id/spinnerModel\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\" />\n" +
                                "        <Spinner\n" +
                                "            android:id=\"@+id/spinnerCPUGPU\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\" />\n" +
                                "        <Button\n" +
                                "            android:id=\"@+id/buttonSwitchCamera\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\"\n" +
                                "            android:text=\"切换摄像头\" />\n" +
                                "        <Button\n" +
                                "            android:id=\"@+id/buttonAppInfo\"\n" +
                                "            android:layout_width=\"wrap_content\"\n" +
                                "            android:layout_height=\"wrap_content\"\n" +
                                "            android:text=\"应用信息\" />\n" +
                                "    </LinearLayout>\n" +
                                "</RelativeLayout>";
            FileUtils.writeStringToFile(mainLayout, mainContent, StandardCharsets.UTF_8);
            System.out.println("创建主界面布局: main.xml");
        }
        
        // 启动页布局
        File splashLayout = new File(layoutDir, "splash.xml");
        if (!splashLayout.exists()) {
            String splashContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                  "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
                                  "    android:layout_width=\"match_parent\"\n" +
                                  "    android:layout_height=\"match_parent\">\n" +
                                  "    <RelativeLayout\n" +
                                  "        android:id=\"@+id/overlay_container\"\n" +
                                  "        android:layout_width=\"match_parent\"\n" +
                                  "        android:layout_height=\"match_parent\">\n" +
                                  "        <ImageView\n" +
                                  "            android:id=\"@+id/splash_image_main\"\n" +
                                  "            android:layout_width=\"match_parent\"\n" +
                                  "            android:layout_height=\"match_parent\"\n" +
                                  "            android:scaleType=\"centerCrop\" />\n" +
                                  "    </RelativeLayout>\n" +
                                  "</RelativeLayout>";
            FileUtils.writeStringToFile(splashLayout, splashContent, StandardCharsets.UTF_8);
            System.out.println("创建启动页布局: splash.xml");
        }
        
        // 应用信息布局
        File appInfoLayout = new File(layoutDir, "app_info.xml");
        if (!appInfoLayout.exists()) {
            String appInfoContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                   "<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
                                   "    android:layout_width=\"match_parent\"\n" +
                                   "    android:layout_height=\"match_parent\"\n" +
                                   "    android:padding=\"16dp\">\n" +
                                   "    <ScrollView\n" +
                                   "        android:layout_width=\"match_parent\"\n" +
                                   "        android:layout_height=\"match_parent\"\n" +
                                   "        android:layout_above=\"@+id/buttonClose\">\n" +
                                   "        <TextView\n" +
                                   "            android:id=\"@+id/textViewAppInfo\"\n" +
                                   "            android:layout_width=\"match_parent\"\n" +
                                   "            android:layout_height=\"wrap_content\"\n" +
                                   "            android:text=\"@string/app_info_text\" />\n" +
                                   "    </ScrollView>\n" +
                                   "    <Button\n" +
                                   "        android:id=\"@+id/buttonClose\"\n" +
                                   "        android:layout_width=\"wrap_content\"\n" +
                                   "        android:layout_height=\"wrap_content\"\n" +
                                   "        android:layout_alignParentBottom=\"true\"\n" +
                                   "        android:layout_centerHorizontal=\"true\"\n" +
                                   "        android:text=\"关闭\" />\n" +
                                   "</RelativeLayout>";
            FileUtils.writeStringToFile(appInfoLayout, appInfoContent, StandardCharsets.UTF_8);
            System.out.println("创建应用信息布局: app_info.xml");
        }
    }
    
    /**
     * 创建必要的values资源文件
     * @param valuesDir values目录
     * @throws IOException 文件操作错误
     */
    private void createRequiredValuesResources(File valuesDir) throws IOException {
        // 确保strings.xml存在
        File stringsFile = new File(valuesDir, "strings.xml");
        if (!stringsFile.exists()) {
            String stringsContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                   "<resources>\n" +
                                   "    <string name=\"app_name\">" + config.appName + "</string>\n" +
                                   "</resources>";
            FileUtils.writeStringToFile(stringsFile, stringsContent, StandardCharsets.UTF_8);
            System.out.println("创建strings.xml");
        }
        
        // 确保ids.xml存在
        File idsFile = new File(valuesDir, "ids.xml");
        if (!idsFile.exists()) {
            String idsContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                               "<resources>\n" +
                               "    <!-- 添加应用所需的ID资源 -->\n" +
                               "</resources>";
            FileUtils.writeStringToFile(idsFile, idsContent, StandardCharsets.UTF_8);
            System.out.println("创建ids.xml");
        }
        
        // 确保styles.xml存在
        File stylesFile = new File(valuesDir, "styles.xml");
        if (!stylesFile.exists()) {
            String stylesContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                                  "<resources>\n" +
                                  "    <style name=\"AppTheme\" parent=\"android:Theme.Light.NoTitleBar.Fullscreen\">\n" +
                                  "        <item name=\"android:windowNoTitle\">true</item>\n" +
                                  "        <item name=\"android:windowFullscreen\">true</item>\n" +
                                  "    </style>\n" +
                                  "</resources>";
            FileUtils.writeStringToFile(stylesFile, stylesContent, StandardCharsets.UTF_8);
            System.out.println("创建styles.xml");
        }
    }

    /**
     * 确保SplashActivity类存在并正确命名
     * @param appDir 应用目录
     * @param packageName 目标包名
     */
    public void ensureActivityExists(File appDir, String packageName) throws IOException {
        // 检查Java源码目录
        File javaDir = new File(appDir, "src/main/java");
        File packageDir = new File(javaDir, packageName.replace('.', '/'));
        File splashActivityFile = new File(packageDir, "SplashActivity.java");
        
        if (!packageDir.exists()) {
            System.out.println("创建包目录: " + packageDir.getAbsolutePath());
            packageDir.mkdirs();
        }
        
        // 如果SplashActivity不存在或需要修复
        if (!splashActivityFile.exists()) {
            System.out.println("未找到SplashActivity，创建基本的闪屏页面类...");
            createSplashActivity(splashActivityFile, packageName);
        } else {
            // 如果文件存在，检查并修复包名
            String content = FileUtils.readFileToString(splashActivityFile, StandardCharsets.UTF_8);
            if (!content.contains("package " + packageName)) {
                // 修复包名
                String newContent = content.replaceFirst("package [^;]+;", "package " + packageName + ";");
                FileUtils.writeStringToFile(splashActivityFile, newContent, StandardCharsets.UTF_8);
                System.out.println("已修复SplashActivity的包名");
            }
        }
    }

    /**
     * 创建基本的SplashActivity
     * @param activityFile 目标文件
     * @param packageName 包名
     */
    private void createSplashActivity(File activityFile, String packageName) throws IOException {
        // 创建一个简单的SplashActivity
        String activityCode = 
                "package " + packageName + ";\n\n" +
                "import android.app.Activity;\n" +
                "import android.content.Intent;\n" +
                "import android.os.Bundle;\n" +
                "import android.os.Handler;\n\n" +
                "/**\n" +
                " * 应用启动页面\n" +
                " */\n" +
                "public class SplashActivity extends Activity {\n\n" +
                "    @Override\n" +
                "    protected void onCreate(Bundle savedInstanceState) {\n" +
                "        super.onCreate(savedInstanceState);\n" +
                "        setContentView(R.layout.activity_splash);\n\n" +
                "        // 延迟后启动主活动\n" +
                "        int delayTime = getResources().getInteger(R.integer.splash_delay_time);\n" +
                "        new Handler().postDelayed(new Runnable() {\n" +
                "            @Override\n" +
                "            public void run() {\n" +
                "                // 启动主活动\n" +
                "                Intent intent = new Intent(SplashActivity.this, MainActivity.class);\n" +
                "                startActivity(intent);\n" +
                "                finish();\n" +
                "            }\n" +
                "        }, delayTime);\n" +
                "    }\n" +
                "}";
        
        FileUtils.writeStringToFile(activityFile, activityCode, StandardCharsets.UTF_8);
        System.out.println("创建SplashActivity: " + activityFile.getAbsolutePath());
        
        // 同时确保存在MainActivity
        File mainActivityFile = new File(activityFile.getParentFile(), "MainActivity.java");
        if (!mainActivityFile.exists()) {
            createMainActivity(mainActivityFile, packageName);
        }
        
        // 确保存在闪屏页面布局
        ensureSplashLayout(new File(activityFile.getParentFile().getParentFile().getParentFile(), "res/layout"));
    }

    /**
     * 创建基本的MainActivity
     */
    private void createMainActivity(File activityFile, String packageName) throws IOException {
        String activityCode = 
                "package " + packageName + ";\n\n" +
                "import android.app.Activity;\n" +
                "import android.os.Bundle;\n\n" +
                "/**\n" +
                " * 应用主页面\n" +
                " */\n" +
                "public class MainActivity extends Activity {\n\n" +
                "    @Override\n" +
                "    protected void onCreate(Bundle savedInstanceState) {\n" +
                "        super.onCreate(savedInstanceState);\n" +
                "        setContentView(R.layout.activity_main);\n" +
                "    }\n" +
                "}";
        
        FileUtils.writeStringToFile(activityFile, activityCode, StandardCharsets.UTF_8);
        System.out.println("创建MainActivity: " + activityFile.getAbsolutePath());
        
        // 确保主页面布局存在
        ensureMainLayout(new File(activityFile.getParentFile().getParentFile().getParentFile(), "res/layout"));
    }

    /**
     * 确保闪屏布局文件存在
     */
    private void ensureSplashLayout(File layoutDir) throws IOException {
        if (!layoutDir.exists()) {
            layoutDir.mkdirs();
        }
        
        File splashLayout = new File(layoutDir, "activity_splash.xml");
        if (!splashLayout.exists()) {
            String layoutXml = 
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                    "<RelativeLayout\n" +
                    "    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
                    "    android:layout_width=\"match_parent\"\n" +
                    "    android:layout_height=\"match_parent\"\n" +
                    "    android:background=\"@android:color/white\">\n\n" +
                    "    <ImageView\n" +
                    "        android:layout_width=\"match_parent\"\n" +
                    "        android:layout_height=\"match_parent\"\n" +
                    "        android:scaleType=\"centerCrop\"\n" +
                    "        android:src=\"@drawable/splash_bg\"/>\n\n" +
                    "    <TextView\n" +
                    "        android:layout_width=\"wrap_content\"\n" +
                    "        android:layout_height=\"wrap_content\"\n" +
                    "        android:layout_alignParentBottom=\"true\"\n" +
                    "        android:layout_centerHorizontal=\"true\"\n" +
                    "        android:layout_marginBottom=\"50dp\"\n" +
                    "        android:text=\"@string/app_name\"\n" +
                    "        android:textColor=\"@android:color/white\"\n" +
                    "        android:textSize=\"28sp\"/>\n" +
                    "</RelativeLayout>";
            
            FileUtils.writeStringToFile(splashLayout, layoutXml, StandardCharsets.UTF_8);
            System.out.println("创建闪屏布局: " + splashLayout.getAbsolutePath());
            
            // 确保存在闪屏背景图
            ensureSplashImage(new File(layoutDir.getParentFile(), "drawable"));
        }
    }

    /**
     * 确保主页面布局存在
     */
    private void ensureMainLayout(File layoutDir) throws IOException {
        if (!layoutDir.exists()) {
            layoutDir.mkdirs();
        }
        
        File mainLayout = new File(layoutDir, "activity_main.xml");
        if (!mainLayout.exists()) {
            String layoutXml = 
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                    "<RelativeLayout\n" +
                    "    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" +
                    "    android:layout_width=\"match_parent\"\n" +
                    "    android:layout_height=\"match_parent\">\n\n" +
                    "    <TextView\n" +
                    "        android:layout_width=\"wrap_content\"\n" +
                    "        android:layout_height=\"wrap_content\"\n" +
                    "        android:layout_centerInParent=\"true\"\n" +
                    "        android:text=\"@string/app_name\"\n" +
                    "        android:textSize=\"24sp\"/>\n" +
                    "</RelativeLayout>";
            
            FileUtils.writeStringToFile(mainLayout, layoutXml, StandardCharsets.UTF_8);
            System.out.println("创建主页面布局: " + mainLayout.getAbsolutePath());
        }
    }

    /**
     * 确保闪屏背景图存在
     */
    private void ensureSplashImage(File drawableDir) throws IOException {
        if (!drawableDir.exists()) {
            drawableDir.mkdirs();
        }
        
        File splashBg = new File(drawableDir, "splash_bg.xml");
        if (!splashBg.exists()) {
            // 创建一个简单的渐变背景作为默认闪屏背景
            String gradientXml = 
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                    "<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n" +
                    "    <gradient\n" +
                    "        android:startColor=\"#3F51B5\"\n" +
                    "        android:endColor=\"#303F9F\"\n" +
                    "        android:angle=\"45\"/>\n" +
                    "</shape>";
            
            FileUtils.writeStringToFile(splashBg, gradientXml, StandardCharsets.UTF_8);
            System.out.println("创建闪屏背景: " + splashBg.getAbsolutePath());
        }
    }

    /**
     * 检查并修复AndroidManifest.xml中的活动声明
     * @param appDir 应用目录
     * @param packageName 包名
     */
    public void fixManifestActivityDeclaration(File appDir, String packageName) throws IOException {
        File manifestFile = new File(appDir, "src/main/AndroidManifest.xml");
        if (!manifestFile.exists()) {
            System.err.println("错误: 找不到AndroidManifest.xml文件");
            return;
        }
        
        String content = FileUtils.readFileToString(manifestFile, StandardCharsets.UTF_8);
        boolean needsUpdate = false;
        
        // 1. 检查包名
        if (!content.contains("package=\"" + packageName + "\"")) {
            content = content.replaceFirst("package=\"[^\"]+\"", "package=\"" + packageName + "\"");
            needsUpdate = true;
        }
        
        // 2. 检查是否声明了SplashActivity
        String splashActivityName = packageName + ".SplashActivity";
        if (!content.contains(splashActivityName)) {
            // 需要添加SplashActivity声明
            int applicationEndIndex = content.lastIndexOf("</application>");
            if (applicationEndIndex != -1) {
                String activityDeclaration = 
                        "\n        <!-- 闪屏页活动 -->\n" +
                        "        <activity\n" +
                        "            android:name=\"" + splashActivityName + "\"\n" +
                        "            android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n" +
                        "            android:exported=\"true\">\n" +
                        "            <intent-filter>\n" +
                        "                <action android:name=\"android.intent.action.MAIN\" />\n" +
                        "                <category android:name=\"android.intent.category.LAUNCHER\" />\n" +
                        "            </intent-filter>\n" +
                        "        </activity>\n";
                
                content = content.substring(0, applicationEndIndex) + activityDeclaration + content.substring(applicationEndIndex);
                needsUpdate = true;
            }
        } else if (!content.contains("android.intent.action.MAIN") || !content.contains("android.intent.category.LAUNCHER")) {
            // SplashActivity存在但没有设置为启动活动
            System.out.println("SplashActivity存在但未设置为启动活动，修复中...");
            
            // 移除任何现有的主启动器声明
            content = content.replaceAll("<intent-filter>\\s*<action android:name=\"android.intent.action.MAIN\"\\s*/>[\\s\\S]*?<category android:name=\"android.intent.category.LAUNCHER\"\\s*/>\\s*</intent-filter>", "");
            
            // 给SplashActivity添加主启动器声明
            String splashActivityTag = "android:name=\"" + splashActivityName + "\"";
            int splashActivityIndex = content.indexOf(splashActivityTag);
            if (splashActivityIndex != -1) {
                int activityCloseIndex = content.indexOf(">", splashActivityIndex);
                if (activityCloseIndex != -1) {
                    String intentFilter = 
                            ">\n" +
                            "            <intent-filter>\n" +
                            "                <action android:name=\"android.intent.action.MAIN\" />\n" +
                            "                <category android:name=\"android.intent.category.LAUNCHER\" />\n" +
                            "            </intent-filter";
                    
                    content = content.substring(0, activityCloseIndex) + intentFilter + content.substring(activityCloseIndex);
                    needsUpdate = true;
                }
            }
        }
        
        // 3. 检查MainActivity声明
        String mainActivityName = packageName + ".MainActivity";
        if (!content.contains(mainActivityName)) {
            // 添加MainActivity声明
            int applicationEndIndex = content.lastIndexOf("</application>");
            if (applicationEndIndex != -1) {
                String activityDeclaration = 
                        "\n        <!-- 主活动 -->\n" +
                        "        <activity\n" +
                        "            android:name=\"" + mainActivityName + "\"\n" +
                        "            android:exported=\"false\">\n" +
                        "        </activity>\n";
                
                content = content.substring(0, applicationEndIndex) + activityDeclaration + content.substring(applicationEndIndex);
                needsUpdate = true;
            }
        }
        
        if (needsUpdate) {
            FileUtils.writeStringToFile(manifestFile, content, StandardCharsets.UTF_8);
            System.out.println("已修复AndroidManifest.xml中的活动声明");
        }
    }

    /**
     * 检查并修复AndroidManifest.xml中的活动声明
     * @param appDir 应用目录
     * @param packageName 包名
     */
    public void fixManifestActivityDeclaration(File appDir, String packageName) throws IOException {
        File manifestFile = new File(appDir, "src/main/AndroidManifest.xml");
        if (!manifestFile.exists()) {
            System.err.println("错误: 找不到AndroidManifest.xml文件");
            return;
        }
        
        String content = FileUtils.readFileToString(manifestFile, StandardCharsets.UTF_8);
        boolean needsUpdate = false;
        
        // 检查AndroidManifest.xml中是否已存在活动声明
        boolean hasSplashActivity = content.contains(packageName + ".SplashActivity");
        boolean hasMainActivity = content.contains(packageName + ".MainActivity");
        boolean hasMainLauncher = content.contains("android.intent.action.MAIN") && 
                                 content.contains("android.intent.category.LAUNCHER");
        
        // 处理Android Gradle 8+不支持package属性的问题
        // 替换方案: 使用xmlns:android属性，并在build.gradle中设置namespace
        if (content.contains("package=\"")) {
            System.out.println("检测到旧式package属性，适配新版Android Gradle Plugin...");
            // 确保有xmlns:android声明
            if (!content.contains("xmlns:android=\"http://schemas.android.com/apk/res/android\"")) {
                content = content.replace("<manifest", 
                        "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"");
                needsUpdate = true;
            }
            
            // 我们不移除package属性，而是保留它用于Java代码中的R类引用
            // 但会更新build.gradle中的namespace设置
            updateNamespaceInBuildGradle(appDir, packageName);
        }
        
        // 创建一个新的清单文件内容，确保不重复添加活动
        if (!hasSplashActivity || !hasMainActivity || !hasMainLauncher) {
            // 1. 如果缺少活动声明或者主启动器，创建一个基本的Android清单结构
            if (!content.contains("<application")) {
                System.out.println("AndroidManifest.xml缺少application标签，创建基本结构...");
                content = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                         "<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n" +
                         "    <application\n" +
                         "        android:allowBackup=\"true\"\n" +
                         "        android:icon=\"@mipmap/ic_launcher\"\n" +
                         "        android:label=\"@string/app_name\"\n" +
                         "        android:theme=\"@android:style/Theme.Light.NoTitleBar\">\n" +
                         "    </application>\n\n" +
                         "</manifest>";
                needsUpdate = true;
            }
            
            // 2. 准备添加活动声明，但避免重复
            int applicationEndIndex = content.lastIndexOf("</application>");
            if (applicationEndIndex != -1) {
                StringBuilder activitiesDeclaration = new StringBuilder();
                
                // 添加SplashActivity（如果缺少）
                if (!hasSplashActivity) {
                    activitiesDeclaration.append("\n        <!-- 闪屏页活动 -->\n")
                            .append("        <activity\n")
                            .append("            android:name=\"").append(packageName).append(".SplashActivity\"\n")
                            .append("            android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n")
                            .append("            android:exported=\"true\"");
                    
                    // 如果缺少主启动器意图过滤器
                    if (!hasMainLauncher) {
                        activitiesDeclaration.append(">\n")
                                .append("            <intent-filter>\n")
                                .append("                <action android:name=\"android.intent.action.MAIN\" />\n")
                                .append("                <category android:name=\"android.intent.category.LAUNCHER\" />\n")
                                .append("            </intent-filter>\n")
                                .append("        </activity>\n");
                    } else {
                        activitiesDeclaration.append(" />\n");
                    }
                } else if (!hasMainLauncher) {
                    // SplashActivity存在但没有主启动器
                    System.out.println("清单中存在SplashActivity但缺少主启动器意图过滤器，修复中...");
                    // 找到SplashActivity定义位置
                    int splashActivityIndex = content.indexOf(packageName + ".SplashActivity");
                    if (splashActivityIndex > 0) {
                        int splashActivityEndTag = content.indexOf(">", splashActivityIndex);
                        if (splashActivityEndTag > 0) {
                            if (content.charAt(splashActivityEndTag - 1) == '/') {
                                // 自闭合标签，修改为带内容标签
                                content = content.substring(0, splashActivityEndTag - 1) +
                                         ">\n" +
                                         "            <intent-filter>\n" +
                                         "                <action android:name=\"android.intent.action.MAIN\" />\n" +
                                         "                <category android:name=\"android.intent.category.LAUNCHER\" />\n" +
                                         "            </intent-filter>\n" +
                                         "        </activity>" +
                                         content.substring(splashActivityEndTag + 1);
                                needsUpdate = true;
                            } else if (content.indexOf("</activity>", splashActivityEndTag) > 0) {
                                // 已有闭合标签，但没有intent-filter
                                if (!content.substring(splashActivityEndTag, content.indexOf("</activity>", splashActivityEndTag))
                                          .contains("<intent-filter")) {
                                    content = content.substring(0, splashActivityEndTag + 1) +
                                             "\n            <intent-filter>\n" +
                                             "                <action android:name=\"android.intent.action.MAIN\" />\n" +
                                             "                <category android:name=\"android.intent.category.LAUNCHER\" />\n" +
                                             "            </intent-filter>" +
                                             content.substring(splashActivityEndTag + 1);
                                    needsUpdate = true;
                                }
                            }
                        }
                    }
                }
                
                // 添加MainActivity（如果缺少）
                if (!hasMainActivity) {
                    activitiesDeclaration.append("\n        <!-- 主活动 -->\n")
                            .append("        <activity\n")
                            .append("            android:name=\"").append(packageName).append(".MainActivity\"\n")
                            .append("            android:exported=\"false\">\n" +
                            "        </activity>\n");
                }
                
                // 将活动声明插入到application标签结束前
                if (activitiesDeclaration.length() > 0) {
                    content = content.substring(0, applicationEndIndex) + 
                             activitiesDeclaration.toString() + 
                             content.substring(applicationEndIndex);
                    needsUpdate = true;
                }
            }
        }
        
        if (needsUpdate) {
            FileUtils.writeStringToFile(manifestFile, content, StandardCharsets.UTF_8);
            System.out.println("已修复AndroidManifest.xml配置");
        } else {
            System.out.println("AndroidManifest.xml配置已经正确，无需修改");
        }
    }
    
    /**
     * 在build.gradle文件中更新namespace设置
     * @param appDir 应用目录
     * @param packageName 包名
     */
    private void updateNamespaceInBuildGradle(File appDir, String packageName) {
        try {
            File buildGradleFile = new File(appDir, "build.gradle");
            if (buildGradleFile.exists()) {
                String content = FileUtils.readFileToString(buildGradleFile, StandardCharsets.UTF_8);
                
                // 查找android块
                int androidBlockStart = content.indexOf("android {");
                if (androidBlockStart >= 0) {
                    int androidBlockEnd = findClosingBrace(content, androidBlockStart + 9);
                    if (androidBlockEnd > androidBlockStart) {
                        // 检查是否已存在namespace设置
                        String androidBlock = content.substring(androidBlockStart, androidBlockEnd);
                        if (!androidBlock.contains("namespace")) {
                            // 添加namespace设置
                            String namespaceConfig = "\n    namespace \"" + packageName + "\"\n";
                            
                            // 在android块的开始位置插入namespace配置
                            content = content.substring(0, androidBlockStart + 10) + 
                                     namespaceConfig +
                                     content.substring(androidBlockStart + 10);
                            
                            FileUtils.writeStringToFile(buildGradleFile, content, StandardCharsets.UTF_8);
                            System.out.println("已在build.gradle中添加namespace设置: " + packageName);
                        } else if (!androidBlock.contains("namespace \"" + packageName + "\"")) {
                            // 更新现有的namespace设置
                            content = content.replaceFirst(
                                "namespace\\s+\"[^\"]+\"", 
                                "namespace \"" + packageName + "\"");
                            FileUtils.writeStringToFile(buildGradleFile, content, StandardCharsets.UTF_8);
                            System.out.println("已更新build.gradle中的namespace设置: " + packageName);
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("更新build.gradle文件时出错: " + e.getMessage());
        }
    }
    
    /**
     * 查找匹配的大括号闭合位置
     * @param content 内容字符串
     * @param openBraceIndex 开括号位置
     * @return 闭括号位置，如果没有找到则返回-1
     */
    private int findClosingBrace(String content, int openBraceIndex) {
        int count = 1;
        for (int i = openBraceIndex; i < content.length(); i++) {
            char c = content.charAt(i);
            if (c == '{') {
                count++;
            } else if (c == '}') {
                count--;
                if (count == 0) {
                    return i;
                }
            }
        }
        return -1;
    }

    /**
     * 从AndroidManifest中检测原始包名
     * @param appDir 应用目录
     * @return 检测到的包名，如果无法检测则返回null
     */
    public String detectOldPackageName(File appDir) throws IOException {
        File manifestFile = new File(appDir, "src/main/AndroidManifest.xml");
        if (!manifestFile.exists()) {
            return null;
        }
        
        String content = FileUtils.readFileToString(manifestFile, StandardCharsets.UTF_8);
        if (content.contains("package=\"") && content.contains("\"")) {
            String packagePart = content.split("package=\"")[1];
            return packagePart.split("\"")[0];
        }
        
        return null;
    }
} 